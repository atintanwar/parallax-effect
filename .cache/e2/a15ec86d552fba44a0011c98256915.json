{"id":"node_modules/rx/dist/rx.testing.js","dependencies":[{"name":"C:\\Users\\atint\\Desktop\\parallax effect\\package.json","includedInParent":true,"mtime":1619074786846},{"name":"C:\\Users\\atint\\Desktop\\parallax effect\\node_modules\\rx\\package.json","includedInParent":true,"mtime":1619074786801},{"name":"./rx","loc":{"line":29,"column":59},"parent":"C:\\Users\\atint\\Desktop\\parallax effect\\node_modules\\rx\\dist\\rx.testing.js","resolved":"C:\\Users\\atint\\Desktop\\parallax effect\\node_modules\\rx\\dist\\rx.js"}],"generated":{"js":"var global = arguments[3];\nvar define;\n// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n;(function (factory) {\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  function checkGlobal(value) {\n    return (value && value.Object === Object) ? value : null;\n  }\n\n  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;\n  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;\n  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);\n  var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;\n  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();\n\n  // Because of build optimizers\n  if (typeof define === 'function' && define.amd) {\n    define(['./rx.virtualtime', 'exports'], function (Rx, exports) {\n      root.Rx = factory(root, exports, Rx);\n      return root.Rx;\n    });\n  } else if (typeof module === 'object' && module && module.exports === freeExports) {\n    module.exports = factory(root, module.exports, require('./rx'));\n  } else {\n    root.Rx = factory(root, {}, root.Rx);\n  }\n}.call(this, function (root, exp, Rx, undefined) {\n\n  // Defaults\n  var Observer = Rx.Observer,\n    Observable = Rx.Observable,\n    Notification = Rx.Notification,\n    VirtualTimeScheduler = Rx.VirtualTimeScheduler,\n    Disposable = Rx.Disposable,\n    disposableEmpty = Disposable.empty,\n    disposableCreate = Disposable.create,\n    CompositeDisposable = Rx.CompositeDisposable,\n    inherits = Rx.internals.inherits,\n    defaultComparer = Rx.internals.isEqual;\n\nfunction OnNextPredicate(predicate) {\n    this.predicate = predicate;\n}\n\nOnNextPredicate.prototype.equals = function (other) {\n  if (other === this) { return true; }\n  if (other == null) { return false; }\n  if (other.kind !== 'N') { return false; }\n  return this.predicate(other.value);\n};\n\nfunction OnErrorPredicate(predicate) {\n  this.predicate = predicate;\n}\n\nOnErrorPredicate.prototype.equals = function (other) {\n  if (other === this) { return true; }\n  if (other == null) { return false; }\n  if (other.kind !== 'E') { return false; }\n  return this.predicate(other.error);\n};\n\nvar ReactiveTest = Rx.ReactiveTest = {\n  /** Default virtual time used for creation of observable sequences in unit tests. */\n  created: 100,\n  /** Default virtual time used to subscribe to observable sequences in unit tests. */\n  subscribed: 200,\n  /** Default virtual time used to dispose subscriptions in unit tests. */\n  disposed: 1000,\n\n  /**\n   * Factory method for an OnNext notification record at a given time with a given value or a predicate function.\n   *\n   * 1 - ReactiveTest.onNext(200, 42);\n   * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });\n   *\n   * @param ticks Recorded virtual time the OnNext notification occurs.\n   * @param value Recorded value stored in the OnNext notification or a predicate.\n   * @return Recorded OnNext notification.\n   */\n  onNext: function (ticks, value) {\n    return typeof value === 'function' ?\n      new Recorded(ticks, new OnNextPredicate(value)) :\n      new Recorded(ticks, Notification.createOnNext(value));\n  },\n  /**\n   * Factory method for an OnError notification record at a given time with a given error.\n   *\n   * 1 - ReactiveTest.onNext(200, new Error('error'));\n   * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });\n   *\n   * @param ticks Recorded virtual time the OnError notification occurs.\n   * @param exception Recorded exception stored in the OnError notification.\n   * @return Recorded OnError notification.\n   */\n  onError: function (ticks, error) {\n    return typeof error === 'function' ?\n      new Recorded(ticks, new OnErrorPredicate(error)) :\n      new Recorded(ticks, Notification.createOnError(error));\n  },\n  /**\n   * Factory method for an OnCompleted notification record at a given time.\n   *\n   * @param ticks Recorded virtual time the OnCompleted notification occurs.\n   * @return Recorded OnCompleted notification.\n   */\n  onCompleted: function (ticks) {\n    return new Recorded(ticks, Notification.createOnCompleted());\n  },\n  /**\n   * Factory method for a subscription record based on a given subscription and disposal time.\n   *\n   * @param start Virtual time indicating when the subscription was created.\n   * @param end Virtual time indicating when the subscription was disposed.\n   * @return Subscription object.\n   */\n  subscribe: function (start, end) {\n    return new Subscription(start, end);\n  }\n};\n\n  /**\n   * Creates a new object recording the production of the specified value at the given virtual time.\n   *\n   * @constructor\n   * @param {Number} time Virtual time the value was produced on.\n   * @param {Mixed} value Value that was produced.\n   * @param {Function} comparer An optional comparer.\n   */\n  var Recorded = Rx.Recorded = function (time, value, comparer) {\n    this.time = time;\n    this.value = value;\n    this.comparer = comparer || defaultComparer;\n  };\n\n  /**\n   * Checks whether the given recorded object is equal to the current instance.\n   *\n   * @param {Recorded} other Recorded object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */\n  Recorded.prototype.equals = function (other) {\n    return this.time === other.time && this.comparer(this.value, other.value);\n  };\n\n  /**\n   * Returns a string representation of the current Recorded value.\n   *\n   * @returns {String} String representation of the current Recorded value.\n   */\n  Recorded.prototype.toString = function () {\n    return this.value.toString() + '@' + this.time;\n  };\n\n  /**\n   * Creates a new subscription object with the given virtual subscription and unsubscription time.\n   *\n   * @constructor\n   * @param {Number} subscribe Virtual time at which the subscription occurred.\n   * @param {Number} unsubscribe Virtual time at which the unsubscription occurred.\n   */\n  var Subscription = Rx.Subscription = function (start, end) {\n    this.subscribe = start;\n    this.unsubscribe = end || Number.MAX_VALUE;\n  };\n\n  /**\n   * Checks whether the given subscription is equal to the current instance.\n   * @param other Subscription object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */\n  Subscription.prototype.equals = function (other) {\n    return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;\n  };\n\n  /**\n   * Returns a string representation of the current Subscription value.\n   * @returns {String} String representation of the current Subscription value.\n   */\n  Subscription.prototype.toString = function () {\n    return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';\n  };\n\n  var MockDisposable = Rx.MockDisposable = function (scheduler) {\n    this.scheduler = scheduler;\n    this.disposes = [];\n    this.disposes.push(this.scheduler.clock);\n  };\n\n  MockDisposable.prototype.dispose = function () {\n    this.disposes.push(this.scheduler.clock);\n  };\n\n  var MockObserver = (function (__super__) {\n    inherits(MockObserver, __super__);\n\n    function MockObserver(scheduler) {\n      __super__.call(this);\n      this.scheduler = scheduler;\n      this.messages = [];\n    }\n\n    var MockObserverPrototype = MockObserver.prototype;\n\n    MockObserverPrototype.onNext = function (value) {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));\n    };\n\n    MockObserverPrototype.onError = function (e) {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(e)));\n    };\n\n    MockObserverPrototype.onCompleted = function () {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));\n    };\n\n    return MockObserver;\n  })(Observer);\n\n  function MockPromise(scheduler, messages) {\n    var self = this;\n    this.scheduler = scheduler;\n    this.messages = messages;\n    this.subscriptions = [];\n    this.observers = [];\n    for (var i = 0, len = this.messages.length; i < len; i++) {\n      var message = this.messages[i],\n          notification = message.value;\n      (function (innerNotification) {\n        scheduler.scheduleAbsolute(null, message.time, function () {\n          var obs = self.observers.slice(0);\n\n          for (var j = 0, jLen = obs.length; j < jLen; j++) {\n            innerNotification.accept(obs[j]);\n          }\n          return disposableEmpty;\n        });\n      })(notification);\n    }\n  }\n\n  MockPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n\n    this.subscriptions.push(new Subscription(this.scheduler.clock));\n    var index = this.subscriptions.length - 1;\n\n    var newPromise;\n\n    var observer = Rx.Observer.create(\n      function (x) {\n        var retValue = onResolved(x);\n        if (retValue && typeof retValue.then === 'function') {\n          newPromise = retValue;\n        } else {\n          var ticks = self.scheduler.clock;\n          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);\n        }\n        var idx = self.observers.indexOf(observer);\n        self.observers.splice(idx, 1);\n        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);\n      },\n      function (err) {\n        onRejected(err);\n        var idx = self.observers.indexOf(observer);\n        self.observers.splice(idx, 1);\n        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);\n      }\n    );\n    this.observers.push(observer);\n\n    return newPromise || new MockPromise(this.scheduler, this.messages);\n  };\n\n  var HotObservable = (function (__super__) {\n    inherits(HotObservable, __super__);\n\n    function HotObservable(scheduler, messages) {\n      __super__.call(this);\n      var message, notification, observable = this;\n      this.scheduler = scheduler;\n      this.messages = messages;\n      this.subscriptions = [];\n      this.observers = [];\n      for (var i = 0, len = this.messages.length; i < len; i++) {\n        message = this.messages[i];\n        notification = message.value;\n        (function (innerNotification) {\n          scheduler.scheduleAbsolute(null, message.time, function () {\n            var obs = observable.observers.slice(0);\n\n            for (var j = 0, jLen = obs.length; j < jLen; j++) {\n              innerNotification.accept(obs[j]);\n            }\n            return disposableEmpty;\n          });\n        })(notification);\n      }\n    }\n\n    HotObservable.prototype._subscribe = function (o) {\n      var observable = this;\n      this.observers.push(o);\n      this.subscriptions.push(new Subscription(this.scheduler.clock));\n      var index = this.subscriptions.length - 1;\n      return disposableCreate(function () {\n        var idx = observable.observers.indexOf(o);\n        observable.observers.splice(idx, 1);\n        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n      });\n    };\n\n    return HotObservable;\n  })(Observable);\n\n  var ColdObservable = (function (__super__) {\n    inherits(ColdObservable, __super__);\n\n    function ColdObservable(scheduler, messages) {\n      __super__.call(this);\n      this.scheduler = scheduler;\n      this.messages = messages;\n      this.subscriptions = [];\n    }\n\n    ColdObservable.prototype._subscribe = function (o) {\n      var message, notification, observable = this;\n      this.subscriptions.push(new Subscription(this.scheduler.clock));\n      var index = this.subscriptions.length - 1;\n      var d = new CompositeDisposable();\n      for (var i = 0, len = this.messages.length; i < len; i++) {\n        message = this.messages[i];\n        notification = message.value;\n        (function (innerNotification) {\n          d.add(observable.scheduler.scheduleRelative(null, message.time, function () {\n            innerNotification.accept(o);\n            return disposableEmpty;\n          }));\n        })(notification);\n      }\n      return disposableCreate(function () {\n        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n        d.dispose();\n      });\n    };\n\n    return ColdObservable;\n  })(Observable);\n\n  /** Virtual time scheduler used for testing applications and libraries built using Reactive Extensions. */\n  Rx.TestScheduler = (function (__super__) {\n    inherits(TestScheduler, __super__);\n\n    function baseComparer(x, y) {\n      return x > y ? 1 : (x < y ? -1 : 0);\n    }\n\n    function TestScheduler() {\n      __super__.call(this, 0, baseComparer);\n    }\n\n    /**\n     * Schedules an action to be executed at the specified virtual time.\n     *\n     * @param state State passed to the action to be executed.\n     * @param dueTime Absolute virtual time at which to execute the action.\n     * @param action Action to be executed.\n     * @return Disposable object used to cancel the scheduled action (best effort).\n     */\n    TestScheduler.prototype.scheduleAbsolute = function (state, dueTime, action) {\n      dueTime <= this.clock && (dueTime = this.clock + 1);\n      return __super__.prototype.scheduleAbsolute.call(this, state, dueTime, action);\n    };\n    /**\n     * Adds a relative virtual time to an absolute virtual time value.\n     *\n     * @param absolute Absolute virtual time value.\n     * @param relative Relative virtual time value to add.\n     * @return Resulting absolute virtual time sum value.\n     */\n    TestScheduler.prototype.add = function (absolute, relative) {\n      return absolute + relative;\n    };\n    /**\n     * Converts the absolute virtual time value to a DateTimeOffset value.\n     *\n     * @param absolute Absolute virtual time value to convert.\n     * @return Corresponding DateTimeOffset value.\n     */\n    TestScheduler.prototype.toAbsoluteTime = function (absolute) {\n      return new Date(absolute).getTime();\n    };\n    /**\n     * Converts the TimeSpan value to a relative virtual time value.\n     *\n     * @param timeSpan TimeSpan value to convert.\n     * @return Corresponding relative virtual time value.\n     */\n    TestScheduler.prototype.toRelativeTime = function (timeSpan) {\n      return timeSpan;\n    };\n    /**\n     * Starts the test scheduler and uses the specified virtual times to invoke the factory function, subscribe to the resulting sequence, and dispose the subscription.\n     *\n     * @param create Factory method to create an observable sequence.\n     * @param created Virtual time at which to invoke the factory to create an observable sequence.\n     * @param subscribed Virtual time at which to subscribe to the created observable sequence.\n     * @param disposed Virtual time at which to dispose the subscription.\n     * @return Observer with timestamped recordings of notification messages that were received during the virtual time window when the subscription to the source sequence was active.\n     */\n    TestScheduler.prototype.startScheduler = function (createFn, settings) {\n      settings || (settings = {});\n      settings.created == null && (settings.created = ReactiveTest.created);\n      settings.subscribed == null && (settings.subscribed = ReactiveTest.subscribed);\n      settings.disposed == null && (settings.disposed = ReactiveTest.disposed);\n\n      var observer = this.createObserver(), source, subscription;\n\n      this.scheduleAbsolute(null, settings.created, function () {\n        source = createFn();\n        return disposableEmpty;\n      });\n\n      this.scheduleAbsolute(null, settings.subscribed, function () {\n        subscription = source.subscribe(observer);\n        return disposableEmpty;\n      });\n\n      this.scheduleAbsolute(null, settings.disposed, function () {\n        subscription.dispose();\n        return disposableEmpty;\n      });\n\n      this.start();\n\n      return observer;\n    };\n\n    /**\n     * Creates a hot observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified absolute virtual times.\n     * @return Hot observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */\n    TestScheduler.prototype.createHotObservable = function () {\n      var len = arguments.length, args;\n      if (Array.isArray(arguments[0])) {\n        args = arguments[0];\n      } else {\n        args = new Array(len);\n        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n      }\n      return new HotObservable(this, args);\n    };\n\n    /**\n     * Creates a cold observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified virtual time offsets from the sequence subscription time.\n     * @return Cold observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */\n    TestScheduler.prototype.createColdObservable = function () {\n      var len = arguments.length, args;\n      if (Array.isArray(arguments[0])) {\n        args = arguments[0];\n      } else {\n        args = new Array(len);\n        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n      }\n      return new ColdObservable(this, args);\n    };\n\n    /**\n     * Creates a resolved promise with the given value and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} value The value to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which fulfills with the given value.\n     */\n    TestScheduler.prototype.createResolvedPromise = function (ticks, value) {\n      return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);\n    };\n\n    /**\n     * Creates a rejected promise with the given reason and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} reason The reason for rejection to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which rejects with the given reason.\n     */\n    TestScheduler.prototype.createRejectedPromise = function (ticks, reason) {\n      return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);\n    };\n\n    /**\n     * Creates an observer that records received notification messages and timestamps those.\n     * @return Observer that can be used to assert the timing of received notifications.\n     */\n    TestScheduler.prototype.createObserver = function () {\n      return new MockObserver(this);\n    };\n\n    return TestScheduler;\n  })(VirtualTimeScheduler);\n\n  return Rx;\n}));\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/rx/dist/rx.testing.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}}],"sources":{"node_modules/rx/dist/rx.testing.js":"// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n;(function (factory) {\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  function checkGlobal(value) {\n    return (value && value.Object === Object) ? value : null;\n  }\n\n  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;\n  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;\n  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);\n  var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n  var freeWindow = checkGlobal(objectTypes[typeof window] && window);\n  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;\n  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();\n\n  // Because of build optimizers\n  if (typeof define === 'function' && define.amd) {\n    define(['./rx.virtualtime', 'exports'], function (Rx, exports) {\n      root.Rx = factory(root, exports, Rx);\n      return root.Rx;\n    });\n  } else if (typeof module === 'object' && module && module.exports === freeExports) {\n    module.exports = factory(root, module.exports, require('./rx'));\n  } else {\n    root.Rx = factory(root, {}, root.Rx);\n  }\n}.call(this, function (root, exp, Rx, undefined) {\n\n  // Defaults\n  var Observer = Rx.Observer,\n    Observable = Rx.Observable,\n    Notification = Rx.Notification,\n    VirtualTimeScheduler = Rx.VirtualTimeScheduler,\n    Disposable = Rx.Disposable,\n    disposableEmpty = Disposable.empty,\n    disposableCreate = Disposable.create,\n    CompositeDisposable = Rx.CompositeDisposable,\n    inherits = Rx.internals.inherits,\n    defaultComparer = Rx.internals.isEqual;\n\nfunction OnNextPredicate(predicate) {\n    this.predicate = predicate;\n}\n\nOnNextPredicate.prototype.equals = function (other) {\n  if (other === this) { return true; }\n  if (other == null) { return false; }\n  if (other.kind !== 'N') { return false; }\n  return this.predicate(other.value);\n};\n\nfunction OnErrorPredicate(predicate) {\n  this.predicate = predicate;\n}\n\nOnErrorPredicate.prototype.equals = function (other) {\n  if (other === this) { return true; }\n  if (other == null) { return false; }\n  if (other.kind !== 'E') { return false; }\n  return this.predicate(other.error);\n};\n\nvar ReactiveTest = Rx.ReactiveTest = {\n  /** Default virtual time used for creation of observable sequences in unit tests. */\n  created: 100,\n  /** Default virtual time used to subscribe to observable sequences in unit tests. */\n  subscribed: 200,\n  /** Default virtual time used to dispose subscriptions in unit tests. */\n  disposed: 1000,\n\n  /**\n   * Factory method for an OnNext notification record at a given time with a given value or a predicate function.\n   *\n   * 1 - ReactiveTest.onNext(200, 42);\n   * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });\n   *\n   * @param ticks Recorded virtual time the OnNext notification occurs.\n   * @param value Recorded value stored in the OnNext notification or a predicate.\n   * @return Recorded OnNext notification.\n   */\n  onNext: function (ticks, value) {\n    return typeof value === 'function' ?\n      new Recorded(ticks, new OnNextPredicate(value)) :\n      new Recorded(ticks, Notification.createOnNext(value));\n  },\n  /**\n   * Factory method for an OnError notification record at a given time with a given error.\n   *\n   * 1 - ReactiveTest.onNext(200, new Error('error'));\n   * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });\n   *\n   * @param ticks Recorded virtual time the OnError notification occurs.\n   * @param exception Recorded exception stored in the OnError notification.\n   * @return Recorded OnError notification.\n   */\n  onError: function (ticks, error) {\n    return typeof error === 'function' ?\n      new Recorded(ticks, new OnErrorPredicate(error)) :\n      new Recorded(ticks, Notification.createOnError(error));\n  },\n  /**\n   * Factory method for an OnCompleted notification record at a given time.\n   *\n   * @param ticks Recorded virtual time the OnCompleted notification occurs.\n   * @return Recorded OnCompleted notification.\n   */\n  onCompleted: function (ticks) {\n    return new Recorded(ticks, Notification.createOnCompleted());\n  },\n  /**\n   * Factory method for a subscription record based on a given subscription and disposal time.\n   *\n   * @param start Virtual time indicating when the subscription was created.\n   * @param end Virtual time indicating when the subscription was disposed.\n   * @return Subscription object.\n   */\n  subscribe: function (start, end) {\n    return new Subscription(start, end);\n  }\n};\n\n  /**\n   * Creates a new object recording the production of the specified value at the given virtual time.\n   *\n   * @constructor\n   * @param {Number} time Virtual time the value was produced on.\n   * @param {Mixed} value Value that was produced.\n   * @param {Function} comparer An optional comparer.\n   */\n  var Recorded = Rx.Recorded = function (time, value, comparer) {\n    this.time = time;\n    this.value = value;\n    this.comparer = comparer || defaultComparer;\n  };\n\n  /**\n   * Checks whether the given recorded object is equal to the current instance.\n   *\n   * @param {Recorded} other Recorded object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */\n  Recorded.prototype.equals = function (other) {\n    return this.time === other.time && this.comparer(this.value, other.value);\n  };\n\n  /**\n   * Returns a string representation of the current Recorded value.\n   *\n   * @returns {String} String representation of the current Recorded value.\n   */\n  Recorded.prototype.toString = function () {\n    return this.value.toString() + '@' + this.time;\n  };\n\n  /**\n   * Creates a new subscription object with the given virtual subscription and unsubscription time.\n   *\n   * @constructor\n   * @param {Number} subscribe Virtual time at which the subscription occurred.\n   * @param {Number} unsubscribe Virtual time at which the unsubscription occurred.\n   */\n  var Subscription = Rx.Subscription = function (start, end) {\n    this.subscribe = start;\n    this.unsubscribe = end || Number.MAX_VALUE;\n  };\n\n  /**\n   * Checks whether the given subscription is equal to the current instance.\n   * @param other Subscription object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */\n  Subscription.prototype.equals = function (other) {\n    return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;\n  };\n\n  /**\n   * Returns a string representation of the current Subscription value.\n   * @returns {String} String representation of the current Subscription value.\n   */\n  Subscription.prototype.toString = function () {\n    return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';\n  };\n\n  var MockDisposable = Rx.MockDisposable = function (scheduler) {\n    this.scheduler = scheduler;\n    this.disposes = [];\n    this.disposes.push(this.scheduler.clock);\n  };\n\n  MockDisposable.prototype.dispose = function () {\n    this.disposes.push(this.scheduler.clock);\n  };\n\n  var MockObserver = (function (__super__) {\n    inherits(MockObserver, __super__);\n\n    function MockObserver(scheduler) {\n      __super__.call(this);\n      this.scheduler = scheduler;\n      this.messages = [];\n    }\n\n    var MockObserverPrototype = MockObserver.prototype;\n\n    MockObserverPrototype.onNext = function (value) {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));\n    };\n\n    MockObserverPrototype.onError = function (e) {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(e)));\n    };\n\n    MockObserverPrototype.onCompleted = function () {\n      this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));\n    };\n\n    return MockObserver;\n  })(Observer);\n\n  function MockPromise(scheduler, messages) {\n    var self = this;\n    this.scheduler = scheduler;\n    this.messages = messages;\n    this.subscriptions = [];\n    this.observers = [];\n    for (var i = 0, len = this.messages.length; i < len; i++) {\n      var message = this.messages[i],\n          notification = message.value;\n      (function (innerNotification) {\n        scheduler.scheduleAbsolute(null, message.time, function () {\n          var obs = self.observers.slice(0);\n\n          for (var j = 0, jLen = obs.length; j < jLen; j++) {\n            innerNotification.accept(obs[j]);\n          }\n          return disposableEmpty;\n        });\n      })(notification);\n    }\n  }\n\n  MockPromise.prototype.then = function (onResolved, onRejected) {\n    var self = this;\n\n    this.subscriptions.push(new Subscription(this.scheduler.clock));\n    var index = this.subscriptions.length - 1;\n\n    var newPromise;\n\n    var observer = Rx.Observer.create(\n      function (x) {\n        var retValue = onResolved(x);\n        if (retValue && typeof retValue.then === 'function') {\n          newPromise = retValue;\n        } else {\n          var ticks = self.scheduler.clock;\n          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);\n        }\n        var idx = self.observers.indexOf(observer);\n        self.observers.splice(idx, 1);\n        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);\n      },\n      function (err) {\n        onRejected(err);\n        var idx = self.observers.indexOf(observer);\n        self.observers.splice(idx, 1);\n        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);\n      }\n    );\n    this.observers.push(observer);\n\n    return newPromise || new MockPromise(this.scheduler, this.messages);\n  };\n\n  var HotObservable = (function (__super__) {\n    inherits(HotObservable, __super__);\n\n    function HotObservable(scheduler, messages) {\n      __super__.call(this);\n      var message, notification, observable = this;\n      this.scheduler = scheduler;\n      this.messages = messages;\n      this.subscriptions = [];\n      this.observers = [];\n      for (var i = 0, len = this.messages.length; i < len; i++) {\n        message = this.messages[i];\n        notification = message.value;\n        (function (innerNotification) {\n          scheduler.scheduleAbsolute(null, message.time, function () {\n            var obs = observable.observers.slice(0);\n\n            for (var j = 0, jLen = obs.length; j < jLen; j++) {\n              innerNotification.accept(obs[j]);\n            }\n            return disposableEmpty;\n          });\n        })(notification);\n      }\n    }\n\n    HotObservable.prototype._subscribe = function (o) {\n      var observable = this;\n      this.observers.push(o);\n      this.subscriptions.push(new Subscription(this.scheduler.clock));\n      var index = this.subscriptions.length - 1;\n      return disposableCreate(function () {\n        var idx = observable.observers.indexOf(o);\n        observable.observers.splice(idx, 1);\n        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n      });\n    };\n\n    return HotObservable;\n  })(Observable);\n\n  var ColdObservable = (function (__super__) {\n    inherits(ColdObservable, __super__);\n\n    function ColdObservable(scheduler, messages) {\n      __super__.call(this);\n      this.scheduler = scheduler;\n      this.messages = messages;\n      this.subscriptions = [];\n    }\n\n    ColdObservable.prototype._subscribe = function (o) {\n      var message, notification, observable = this;\n      this.subscriptions.push(new Subscription(this.scheduler.clock));\n      var index = this.subscriptions.length - 1;\n      var d = new CompositeDisposable();\n      for (var i = 0, len = this.messages.length; i < len; i++) {\n        message = this.messages[i];\n        notification = message.value;\n        (function (innerNotification) {\n          d.add(observable.scheduler.scheduleRelative(null, message.time, function () {\n            innerNotification.accept(o);\n            return disposableEmpty;\n          }));\n        })(notification);\n      }\n      return disposableCreate(function () {\n        observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n        d.dispose();\n      });\n    };\n\n    return ColdObservable;\n  })(Observable);\n\n  /** Virtual time scheduler used for testing applications and libraries built using Reactive Extensions. */\n  Rx.TestScheduler = (function (__super__) {\n    inherits(TestScheduler, __super__);\n\n    function baseComparer(x, y) {\n      return x > y ? 1 : (x < y ? -1 : 0);\n    }\n\n    function TestScheduler() {\n      __super__.call(this, 0, baseComparer);\n    }\n\n    /**\n     * Schedules an action to be executed at the specified virtual time.\n     *\n     * @param state State passed to the action to be executed.\n     * @param dueTime Absolute virtual time at which to execute the action.\n     * @param action Action to be executed.\n     * @return Disposable object used to cancel the scheduled action (best effort).\n     */\n    TestScheduler.prototype.scheduleAbsolute = function (state, dueTime, action) {\n      dueTime <= this.clock && (dueTime = this.clock + 1);\n      return __super__.prototype.scheduleAbsolute.call(this, state, dueTime, action);\n    };\n    /**\n     * Adds a relative virtual time to an absolute virtual time value.\n     *\n     * @param absolute Absolute virtual time value.\n     * @param relative Relative virtual time value to add.\n     * @return Resulting absolute virtual time sum value.\n     */\n    TestScheduler.prototype.add = function (absolute, relative) {\n      return absolute + relative;\n    };\n    /**\n     * Converts the absolute virtual time value to a DateTimeOffset value.\n     *\n     * @param absolute Absolute virtual time value to convert.\n     * @return Corresponding DateTimeOffset value.\n     */\n    TestScheduler.prototype.toAbsoluteTime = function (absolute) {\n      return new Date(absolute).getTime();\n    };\n    /**\n     * Converts the TimeSpan value to a relative virtual time value.\n     *\n     * @param timeSpan TimeSpan value to convert.\n     * @return Corresponding relative virtual time value.\n     */\n    TestScheduler.prototype.toRelativeTime = function (timeSpan) {\n      return timeSpan;\n    };\n    /**\n     * Starts the test scheduler and uses the specified virtual times to invoke the factory function, subscribe to the resulting sequence, and dispose the subscription.\n     *\n     * @param create Factory method to create an observable sequence.\n     * @param created Virtual time at which to invoke the factory to create an observable sequence.\n     * @param subscribed Virtual time at which to subscribe to the created observable sequence.\n     * @param disposed Virtual time at which to dispose the subscription.\n     * @return Observer with timestamped recordings of notification messages that were received during the virtual time window when the subscription to the source sequence was active.\n     */\n    TestScheduler.prototype.startScheduler = function (createFn, settings) {\n      settings || (settings = {});\n      settings.created == null && (settings.created = ReactiveTest.created);\n      settings.subscribed == null && (settings.subscribed = ReactiveTest.subscribed);\n      settings.disposed == null && (settings.disposed = ReactiveTest.disposed);\n\n      var observer = this.createObserver(), source, subscription;\n\n      this.scheduleAbsolute(null, settings.created, function () {\n        source = createFn();\n        return disposableEmpty;\n      });\n\n      this.scheduleAbsolute(null, settings.subscribed, function () {\n        subscription = source.subscribe(observer);\n        return disposableEmpty;\n      });\n\n      this.scheduleAbsolute(null, settings.disposed, function () {\n        subscription.dispose();\n        return disposableEmpty;\n      });\n\n      this.start();\n\n      return observer;\n    };\n\n    /**\n     * Creates a hot observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified absolute virtual times.\n     * @return Hot observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */\n    TestScheduler.prototype.createHotObservable = function () {\n      var len = arguments.length, args;\n      if (Array.isArray(arguments[0])) {\n        args = arguments[0];\n      } else {\n        args = new Array(len);\n        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n      }\n      return new HotObservable(this, args);\n    };\n\n    /**\n     * Creates a cold observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified virtual time offsets from the sequence subscription time.\n     * @return Cold observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */\n    TestScheduler.prototype.createColdObservable = function () {\n      var len = arguments.length, args;\n      if (Array.isArray(arguments[0])) {\n        args = arguments[0];\n      } else {\n        args = new Array(len);\n        for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n      }\n      return new ColdObservable(this, args);\n    };\n\n    /**\n     * Creates a resolved promise with the given value and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} value The value to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which fulfills with the given value.\n     */\n    TestScheduler.prototype.createResolvedPromise = function (ticks, value) {\n      return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);\n    };\n\n    /**\n     * Creates a rejected promise with the given reason and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} reason The reason for rejection to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which rejects with the given reason.\n     */\n    TestScheduler.prototype.createRejectedPromise = function (ticks, reason) {\n      return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);\n    };\n\n    /**\n     * Creates an observer that records received notification messages and timestamps those.\n     * @return Observer that can be used to assert the timing of received notifications.\n     */\n    TestScheduler.prototype.createObserver = function () {\n      return new MockObserver(this);\n    };\n\n    return TestScheduler;\n  })(VirtualTimeScheduler);\n\n  return Rx;\n}));\n"},"lineCount":512}},"error":null,"hash":"c2b34515e06de8c2d744fa936e84f094","cacheData":{"env":{}}}